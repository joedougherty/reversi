#!/usr/bin/env python

from six.moves import input
from Board import Board

def alternate_player(current_player):
    if current_player == board.BLACK:
        return board.WHITE
    return board.BLACK

def render(board_matrix):
    hr = '-------------------------'
    print(hr)
    for row in board_matrix:
        row = '|' + '|'.join(row) + '|'
        print(row)
        print(hr)

def validate_proposed_move(proposed_move):
    try:
        return (int(proposed_move[0]), int(proposed_move[2]))
    except:
        print("Move must be in row,col format. Ex: 5,4") 

board = Board()

current_player = board.BLACK # Black moves first
legal_moves = board.find_legal_moves(current_player)

proposed_move = False

while legal_moves != []:
    render(board.matrix)
    print("{}: it's your move.".format(current_player))
    print("Your possible moves: {}".format(list(set([x.coordinates for x in legal_moves]))))
    
    while proposed_move not in [x.coordinates for x in legal_moves]:
        proposed_move = validate_proposed_move(input('Propose a move:'))

    board.update(proposed_move, current_player, legal_moves)  
    current_player = alternate_player(current_player)
    legal_moves = board.find_legal_moves(current_player)

render(board.matrix)
print('Black pieces: {}'.format(board.count_pieces(board.BLACK)))
print('White pieces: {}'.format(board.count_pieces(board.WHITE)))

