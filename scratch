
def create_tree(board, current_player, depth=3):
    if depth == 0:
        return 

    """
    if it's a final board:
        return
    """

    game_tree = []

    # Find available moves for current player
    legal_moves = board.find_legal_moves(current_player)     
    for proposed_move in legal_moves:
        new_board = board.update(proposed_move.coordinates, current_player, legal_moves)  
        game_tree.append(new_board)

    for b in game_tree:
        opponent = alternate_player(current_player)
        create_tree(b, opponent, depth=depth-1)
